

--------- CREATE NEW PAGES --------
1. Create "portfolios", "blogs" and "cv" page.
2. Make all of the pages class component.
3. Return just simple text "I am Blogs Page...."





------------ GET POST --------------------
1. In getInitialProps create new get request to axios to endpoint: 'https://jsonplaceholder.typicode.com/posts/:postId'
2. Get data from response and pass them to props
3. in render function of portfolio display data of post you just fetched
4. good luck (:




------------ NEW PAGE WRAPPING COMPONENT --------------------
1. In components folder create "BasePage" Functional Component
2. Return from this component <div> with className "base-page"
3. Inside Of <div> return "Container" component from "reactstrap"
4. Finaly, inside of "Container" return "props.children"
    NOTE: Don't forget to get props from argument of function
5. Wrap all of our pages inside of "BasePage", (don't do it for index page)
   e.g. <BaseLayout>
          <BasePage>
            ....
6. in main.scss create styles for base-bage, apply padding-top of 150px;
7. good luck and have fun (:





------------ NEW PAGE WRAPPING COMPONENT --------------------
1. Create new input for textarea, handleChange of this textArea and setState of "description"
2. Create  select with multiple options, handleChange of this select and setState of "language"
3. Feel free to check React Forms documentation I showed you in previous lecture.
4. Alert state with "title" , "description" and "language"
5. good luck and have fun (:





------------ PORTFOLIO MODEL --------------------
1. Create Portfolio Model similar to Book
2. Desribe this model with:
 userId: String
 title: String,
 company: String,
 location: String,
 position: String,
 description: String,
 startDate: Date
 endDate: Date
3. Good luck and have fun (:



------------ PORTFOLIO ROUTES --------------------
1. Create GET route to get all portfolios, endpoint path: '/api/v1/portfolios'
2. Create POST route to save a portfolio, endpoint path: '/api/v1/portfolios'
3. To both routes provide "checkJWT" and "checkRole('siteOwner')" middlewares
4. Separate functionality to controllers and routes folders as we did with books.
5. Get inspired by Books, functionality for portfolios is the same.
6. Good luck and have fun (:



------------ PORTFOLIO ROUTES ++ --------------------
1. Create PATCH route to update portfolio, endpoint path: '/api/v1/portfolios/:id'
2. Create DELETE route to delete portfolio, endpoint path: '/api/v1/portfolios/:id'




------------ GET ALL PORTFOLIOS --------------------
1. In actions/index.js create new function to get all portfolios, you can call it "getPortfolios",
    - Send GET request to 'http://localhost:3000/api/v1/portfolios'
    - don't forget to provide auth headers
    - Get inspired by getSecretData we created before
2. In portfolios.js Page in getInitialProps call newly created function getPortfolios
   and return fetched portfolios.
3. Refactor our page to work with portfolios
4. Display these data in render function:
  - portfolio-card-header: {portfolio.position}
  - portfolio-card-city: {portfolio.location}
  - portfolio-card-title: {portfolio.title}
  - portfolio-card-text: {portfolio.description}
5. Good luck and have fun (:





